name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    services:
      # We're using SQLite, so no external services needed

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create required directories
      run: |
        mkdir -p data logs media staticfiles

    - name: Set up environment variables
      run: |
        echo "DEBUG=False" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
        echo "DATABASE_PATH=data/test_db.sqlite3" >> .env

    - name: Run Django migrations
      run: |
        python manage.py migrate

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput

    - name: Run ruff linting
      run: |
        ruff check .
      continue-on-error: true

    - name: Run black formatting check
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Run pytest with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=70

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ecommerce-app:latest .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 \
          -e DEBUG=False \
          -e SECRET_KEY=test-secret \
          -e ALLOWED_HOSTS=localhost,127.0.0.1 \
          ecommerce-app:latest

        # Wait for container to start
        sleep 30

        # Test health check
        curl -f http://localhost:8000/ || exit 1

        # Clean up
        docker stop test-container

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install security tools
      run: |
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check
      continue-on-error: true

    - name: Run bandit security linter
      run: |
        bandit -r . -x ./venv,./node_modules,./frontend
      continue-on-error: true